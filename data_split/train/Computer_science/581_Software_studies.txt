Software studies is an emerging interdisciplinary research field, which studies software systems and their social and cultural effects.


== Overview ==
The implementation and use of software has been studied in recent fields such as cyberculture, Internet studies, new media studies, and digital culture, yet prior to software studies, software was rarely ever addressed as a distinct object of study.
Software studies is an interdisciplinary field. To study software as an artifact, it draws upon methods and theory from the digital humanities and from computational perspectives on software. Methodologically, software studies usually differs from the approaches of computer science and software engineering, which concern themselves primarily with software in information theory and in practical application; however, these fields all share an emphasis on computer literacy, particularly in the areas of programming and source code. This emphasis on analyzing software sources and processes (rather than interfaces) often distinguishes software studies from new media studies, which is usually restricted to discussions of interfaces and observable effects.


== History ==
The conceptual origins of software studies include Marshall McLuhan's focus on the role of media in themselves, rather than the content of media platforms, in shaping culture. Early references to the study of software as a cultural practice appear in Friedrich Kittler's essay, "Es gibt keine Software," Lev Manovich's Language of New Media, and Matthew Fuller's Behind the Blip: Essays on the culture of software. Much of the impetus for the development of software studies has come from videogame studies, particularly platform studies, the study of videogames and other software artifacts in their hardware and software contexts. New media art, software art, motion graphics, and computer-aided design are also significant software-based cultural practices, as is the creation of new protocols and platforms.
The first conference events in the emerging field were Software Studies Workshop 2006 and SoftWhere 2008.
In 2008, MIT Press launched a Software Studies book series with an edited volume of essays (Matthew Fuller's "Software Studies: a Lexicon"), and the first academic program was launched, (Lev Manovich, Benjamin H. Bratton and Noah Wardrip-Fruin's "Software Studies Initiative" at U. California San Diego).
In 2011, a number of mainly British researchers established Computational Culture, an open-access peer-reviewed journal. The journal provides a platform for "inter-disciplinary enquiry into the nature of the culture of computational objects, practices, processes and structures."


== Related fields ==
Software studies is closely related to a number of other emerging fields in the digital humanities that explore functional components of technology from a social and cultural perspective. Software studies' focus is at the level of the entire program, specifically the relationship between interface and code. Notably related are critical code studies, which is more closely attuned to the code rather than the program, and platform studies, which investigates the relationships between hardware and software.


== See also ==
Critical code studies
Digital Humanities
Cultural studies
New media
Computer science
Software engineering
Digital sociology


== References ==


== Bibliography ==
Bassett, C. (2007) The Arc and the Machine: Narrative and New Media. Manchester:Manchester University Press.
Black, M. J, (2002) The Art of Code. PhD dissertation, University ofPennsylvania.
Berry, D. M. (2011) The Philosophy of Software: Code and Mediation in the Digital Age, Basingstoke: Palgrave Macmillan.
Berry, D. M. (2008) Copy, Rip, Burn: The Politics of Copyleft and Open Source, London: Pluto Press.
Chopra, S. and Dexter, S. (2008) Decoding Liberation: The Promise of Free and Open Source Software. Oxford: Routledge.
Chun, W. H. K. (2008) ‘On “Sourcery,” or Code as Fetish’, Configurations, 16:299–324.
Fuller, M. (2003) Behind the Blip: Essays on the Culture of Software. London: Autonomedia.
Fuller, M. (2006) Software Studies Workshop, retrieved 13/04/2010
Fuller, M. (2008) Software Studies: A Lexicon. London: MIT Press.
Hayles, N. K. (2004) ‘Print Is Flat, Code Is Deep: The Importance of Media-Specific Analysis’, Poetics Today, 25(1): 67–90.
Heim, M. (1987) Electric Language: A Philosophical Discussion of Word Processing. London: Yale University Press.
Kirschenbaum, M. (2004) ‘Extreme Inscription: Towards a Grammatology of the Hard Drive’, TEXT Technology, No. 2, pp. 91–125.
Kittler, F. (1997). Literature, Media, Information Systems, Johnston, J. (ed.). Amsterdam: OPA.
Kittler, F. (1999) Gramophone, Film, Typewriter. Stanford: Stanford University Press.
Mackenzie, A. (2003) The problem of computer code: Leviathan or common power, retrieved 13/03/2010 from http://www.lancs.ac.uk/staff/mackenza/papers/code-leviathan.pdf
Mackenzie, A. (2006) Cutting Code: Software and Sociality, Oxford: Peter Lang.
Manovich, L. (2001) The Language of New Media. London: MIT Press.
Manovich, L. (2008) Software takes Command, first draft released under CC license, retrieved 03/05/2010
Manovich, L. (2013) Software takes Command, London and New York: Bloomsbury Academic.
Manovich, L. and Douglas, J. (2009) Visualizing Temporal Patterns In Visual Media: Computer Graphics as a Research Method, retrieved 10/10/09
Marino, M. C. (2006) Critical Code Studies, Electronic Book Review, accessed 16 Sept 2011
Montfort, N. and Bogost, I. (2009) Racing the Beam: The Atari Video Computer System, London: MIT Press.
Wardrip-Fruin, N. (2011) Expressive Processing. London: MIT Press.


== External links ==
Software studies bibliography at Monoskop.org